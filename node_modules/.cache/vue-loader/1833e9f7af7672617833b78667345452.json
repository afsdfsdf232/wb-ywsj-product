{"remainingRequest":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\iview-loader\\index.js??ref--0-2!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\layouts\\basic-layout\\header-breadcrumb\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\layouts\\basic-layout\\header-breadcrumb\\index.vue","mtime":1589175614000},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628602912197},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js","mtime":1628602899323},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628602912197},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\vue-loader\\lib\\index.js","mtime":1628602913036},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\iview-loader\\index.js","mtime":1628602915515}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport { flattenSiderMenu } from '@/libs/system';\nimport iMenuHeadTitle from '../menu-head/title';\nimport { on, off } from 'view-design/src/utils/dom';\nimport { findComponentUpward, getStyle } from 'view-design/src/utils/assist';\nimport { throttle } from 'lodash';\n\nexport default {\n    name: 'iHeaderBreadcrumb',\n    components: { iMenuHeadTitle },\n    computed: {\n        ...mapState('admin/layout', [\n            'showBreadcrumbIcon',\n            'menuCollapse'\n        ]),\n        ...mapState('admin/menu', [\n            'openNames',\n            'activePath',\n            'header',\n            'headerName',\n            'menuSider'\n        ]),\n        siderMenuObject () {\n            let obj = {};\n            this.allSiderMenu.forEach(item => {\n                if ('path' in item) {\n                    obj[item.path] = item;\n                }\n            });\n            return obj;\n        },\n        items () {\n            let items = [...this.openNames];\n            let newItems = [];\n            items.forEach(i => {\n                newItems.push(this.siderMenuObject[i]);\n            });\n            return newItems;\n        },\n        // 第一级，默认是 menu/header.js 中的第一项\n        topItem () {\n            return this.header.find(item => item.name === this.headerName);\n        },\n        // 得到所有侧边菜单，并转为平级，查询图标及显示对应内容\n        allSiderMenu () {\n            return flattenSiderMenu(this.menuSider, []);\n        }\n    },\n    data () {\n        return {\n            handleResize: () => {},\n            isLimit: false,\n            maxWidth: 560,\n            breadcrumbWidth: 0\n        }\n    },\n    methods: {\n        handleCheckWidth () {\n            const $header = findComponentUpward(this, 'Header');\n            if ($header) {\n                const headerWidth = parseInt(getStyle($header.$el, 'width'));\n                this.$nextTick(() => {\n                    this.isLimit = headerWidth - this.maxWidth <= this.breadcrumbWidth;\n                });\n            }\n        },\n        handleGetWidth () {\n            this.isLimit = false;\n            this.$nextTick(() => {\n                const $breadcrumb = this.$refs.breadcrumb;\n                if ($breadcrumb) {\n                    this.breadcrumbWidth = parseInt(getStyle($breadcrumb.$el, 'width'));\n                }\n            });\n        }\n    },\n    watch: {\n        topItem: {\n            handler () {\n                this.handleGetWidth();\n                this.handleCheckWidth();\n            },\n            deep: true\n        },\n        items: {\n            handler () {\n                this.handleGetWidth();\n                this.handleCheckWidth();\n            },\n            deep: true\n        },\n        activePath: {\n            handler () {\n                this.handleGetWidth();\n                this.handleCheckWidth();\n            },\n            deep: true\n        }\n    },\n    mounted () {\n        this.handleResize = throttle(this.handleCheckWidth, 100, { leading: false });\n        on(window, 'resize', this.handleResize);\n        this.handleGetWidth();\n        this.handleCheckWidth();\n    },\n    beforeDestroy () {\n        off(window, 'resize', this.handleResize);\n    }\n}\n",null]}