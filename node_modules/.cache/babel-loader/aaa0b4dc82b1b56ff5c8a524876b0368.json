{"remainingRequest":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\libs\\util.log.js","dependencies":[{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\libs\\util.log.js","mtime":1589174870000},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628602912197},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js","mtime":1628602899323},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js","mtime":1607701091992}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar log = {};\n/**\r\n * @description 返回这个样式的颜色值\r\n * @param {String} type 样式名称 [ primary | success | warning | error | text ]\r\n */\n\nfunction typeColor() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  var color = '';\n\n  switch (type) {\n    case 'default':\n      color = '#515a6e';\n      break;\n\n    case 'primary':\n      color = '#2d8cf0';\n      break;\n\n    case 'success':\n      color = '#19be6b';\n      break;\n\n    case 'warning':\n      color = '#ff9900';\n      break;\n\n    case 'error':\n      color = '#ed4014';\n      break;\n\n    default:\n      ;\n      break;\n  }\n\n  return color;\n}\n/**\r\n * @description 打印一个 [ title | text ] 样式的信息\r\n * @param {String} title title text\r\n * @param {String} info info text\r\n * @param {String} type style\r\n */\n\n\nlog.capsule = function (title, info) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'primary';\n  console.log(\"%c \".concat(title, \" %c \").concat(info, \" %c\"), 'background:#35495E; padding: 1px; border-radius: 3px 0 0 3px; color: #fff;', \"background:\".concat(typeColor(type), \"; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff;\"), 'background:transparent');\n};\n/**\r\n * @description 打印彩色文字\r\n */\n\n\nlog.colorful = function (textArr) {\n  var _console;\n\n  (_console = console).log.apply(_console, [\"%c\".concat(textArr.map(function (t) {\n    return t.text || '';\n  }).join('%c'))].concat(_toConsumableArray(textArr.map(function (t) {\n    return \"color: \".concat(typeColor(t.type), \";\");\n  }))));\n};\n/**\r\n * @description 打印 default 样式的文字\r\n */\n\n\nlog.default = function (text) {\n  log.colorful([{\n    text: text\n  }]);\n};\n/**\r\n * @description 打印 primary 样式的文字\r\n */\n\n\nlog.primary = function (text) {\n  log.colorful([{\n    text: text,\n    type: 'primary'\n  }]);\n};\n/**\r\n * @description 打印 success 样式的文字\r\n */\n\n\nlog.success = function (text) {\n  log.colorful([{\n    text: text,\n    type: 'success'\n  }]);\n};\n/**\r\n * @description 打印 warning 样式的文字\r\n */\n\n\nlog.warning = function (text) {\n  log.colorful([{\n    text: text,\n    type: 'warning'\n  }]);\n};\n/**\r\n * @description 打印 error 样式的文字\r\n */\n\n\nlog.error = function (text) {\n  log.colorful([{\n    text: text,\n    type: 'error'\n  }]);\n};\n\nexport default log;",null]}