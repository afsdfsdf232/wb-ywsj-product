{"remainingRequest":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\store\\modules\\admin\\modules\\page.js","dependencies":[{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\store\\modules\\admin\\modules\\page.js","mtime":1630805802457},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628602912197},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js","mtime":1628602899323},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js","mtime":1607701091992}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"D:/project/WB/d2/\\u514D\\u8D39\\u9886\\u524D\\u7AEF\\u4EFB\\u52A1\\u5305/ywsj-product/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\r\n * 多标签页\r\n * */\nimport { get } from 'lodash';\nimport router from '@/router';\nimport Setting from '@/setting';\nimport menuSider from '@/menu/sider';\nimport { getAllSiderMenu, includeArray } from '@/libs/system'; // 判定是否需要缓存\n\nvar isKeepAlive = function isKeepAlive(data) {\n  return get(data, 'meta.cache', false);\n};\n\nexport default {\n  namespaced: true,\n  state: {\n    // 可以在多页 tab 模式下显示的页面\n    pool: [],\n    // 当前显示的多页面列表\n    opened: Setting.page.opened,\n    // 当前页面\n    current: '',\n    // 需要缓存的页面 name\n    keepAlive: []\n  },\n  actions: {\n    /**\r\n     * @description 从持久化数据载入分页列表\r\n     */\n    openedLoad: function openedLoad(_ref) {\n      var state = _ref.state,\n          commit = _ref.commit,\n          dispatch = _ref.dispatch,\n          rootState = _ref.rootState;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve) {\n          var value, valid;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return dispatch('admin/db/get', {\n                    dbName: 'sys',\n                    path: 'page.opened',\n                    defaultValue: Setting.page.opened,\n                    user: true\n                  }, {\n                    root: true\n                  });\n\n                case 2:\n                  value = _context.sent;\n                  // 在处理函数中进行数据优化 过滤掉现在已经失效的页签或者已经改变了信息的页签\n                  // 以 fullPath 字段为准\n                  // 如果页面过多的话可能需要优化算法\n                  // valid 有效列表 1, 1, 0, 1 => 有效, 有效, 失效, 有效\n                  valid = []; // 处理数据\n\n                  state.opened = value.map(function (opened) {\n                    // 忽略首页\n                    if (opened.fullPath === '/index') {\n                      valid.push(1);\n                      return opened;\n                    } // 尝试在所有的支持多标签页的页面里找到 name 匹配的页面\n\n\n                    var find = state.pool.find(function (item) {\n                      return item.name === opened.name;\n                    }); // 2.3.0 如果 value 项有 keepMeta 字段，则保留 meta\n\n                    if (opened.keepMeta) {\n                      find.meta = Object.assign({}, opened.meta);\n                    } // 记录有效或无效信息\n\n\n                    valid.push(find ? 1 : 0); // 返回合并后的数据 新的覆盖旧的\n                    // 新的数据中一般不会携带 params 和 query, 所以旧的参数会留存\n\n                    return Object.assign({}, opened, find);\n                  }).filter(function (opened, index) {\n                    return valid[index] === 1;\n                  }) // 对 menu 鉴权过滤\n                  .filter(function (opened) {\n                    var allSiderMenu = getAllSiderMenu(menuSider);\n                    var find = allSiderMenu.find(function (item) {\n                      return item.path === opened.fullPath;\n                    });\n                    var state = true;\n\n                    if (find && find.auth) {\n                      var userInfo = rootState.admin.user.info; // @权限\n\n                      var access = userInfo.access; // 如果用户当前的权限，不是该 menu 对应的 权限，则过滤这个 Tab\n\n                      if (access && !includeArray(find.auth, access)) state = false;\n                    }\n\n                    return state;\n                  }); // 根据 opened 数据生成缓存设置\n\n                  commit('keepAliveRefresh'); // end\n\n                  resolve();\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * 将 opened 属性赋值并持久化 在这之前请先确保已经更新了 state.opened\r\n     */\n    opened2db: function opened2db(_ref3) {\n      var state = _ref3.state,\n          dispatch = _ref3.dispatch;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // 设置数据\n                  dispatch('admin/db/set', {\n                    dbName: 'sys',\n                    path: 'page.opened',\n                    value: state.opened,\n                    user: true\n                  }, {\n                    root: true\n                  }); // end\n\n                  resolve();\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 更新页面列表上的某一项\r\n     * @param {Object} param { index, params, query, fullPath } 路由信息\r\n     */\n    openedUpdate: function openedUpdate(_ref5, _ref6) {\n      var state = _ref5.state,\n          commit = _ref5.commit,\n          dispatch = _ref5.dispatch;\n      var index = _ref6.index,\n          params = _ref6.params,\n          query = _ref6.query,\n          fullPath = _ref6.fullPath,\n          meta = _ref6.meta,\n          _ref6$keepMeta = _ref6.keepMeta,\n          keepMeta = _ref6$keepMeta === void 0 ? false : _ref6$keepMeta;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(resolve) {\n          var page;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  // 更新页面列表某一项\n                  page = state.opened[index];\n                  page.params = params || page.params;\n                  page.query = query || page.query;\n                  page.fullPath = fullPath || page.fullPath;\n                  page.meta = meta || page.meta;\n                  page.keepMeta = keepMeta;\n                  state.opened.splice(index, 1, page); // 持久化\n\n                  _context3.next = 9;\n                  return dispatch('opened2db');\n\n                case 9:\n                  // end\n                  resolve();\n\n                case 10:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 更新页面当前项\r\n     * @param {Object} param { params, query, fullPath } 路由信息\r\n     */\n    currentUpdate: function currentUpdate(_ref8, _ref9) {\n      var state = _ref8.state,\n          commit = _ref8.commit,\n          dispatch = _ref8.dispatch;\n      var params = _ref9.params,\n          query = _ref9.query,\n          fullPath = _ref9.fullPath,\n          meta = _ref9.meta,\n          _ref9$keepMeta = _ref9.keepMeta,\n          keepMeta = _ref9$keepMeta === void 0 ? false : _ref9$keepMeta;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(resolve) {\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                    var index, page;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            // 更新当前项\n                            index = state.opened.findIndex(function (item) {\n                              return item.fullPath === state.current;\n                            });\n                            page = state.opened[index];\n                            page.params = params || page.params;\n                            page.query = query || page.query;\n                            page.fullPath = fullPath || page.fullPath;\n                            page.meta = meta || page.meta;\n                            page.keepMeta = keepMeta;\n                            state.opened.splice(index, 1, page); // 持久化\n\n                            _context4.next = 10;\n                            return dispatch('opened2db');\n\n                          case 10:\n                            // end\n                            resolve();\n\n                          case 11:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  })), 0);\n\n                case 1:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x4) {\n          return _ref10.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 新增一个 tag (打开一个页面)\r\n     * @param {Object} param new tag info\r\n     */\n    add: function add(_ref12, _ref13) {\n      var state = _ref12.state,\n          commit = _ref12.commit,\n          dispatch = _ref12.dispatch;\n      var tag = _ref13.tag,\n          params = _ref13.params,\n          query = _ref13.query,\n          fullPath = _ref13.fullPath;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(resolve) {\n          var newTag;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  // 设置新的 tag 在新打开一个以前没打开过的页面时使用\n                  newTag = tag;\n                  newTag.params = params || newTag.params;\n                  newTag.query = query || newTag.query;\n                  newTag.fullPath = fullPath || newTag.fullPath; // 添加进当前显示的页面数组\n\n                  state.opened.push(newTag); // 如果这个页面需要缓存 将其添加到缓存设置\n\n                  if (isKeepAlive(newTag)) {\n                    commit('keepAlivePush', tag.name);\n                  } // 持久化\n\n\n                  _context6.next = 8;\n                  return dispatch('opened2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        return function (_x5) {\n          return _ref14.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 打开一个新的页面\r\n     * @param {Object} param 从路由钩子的 to 对象上获取 { name, params, query, fullPath } 路由信息\r\n     */\n    open: function open(_ref15, _ref16) {\n      var state = _ref15.state,\n          commit = _ref15.commit,\n          dispatch = _ref15.dispatch;\n      var name = _ref16.name,\n          params = _ref16.params,\n          query = _ref16.query,\n          fullPath = _ref16.fullPath;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(resolve) {\n          var opened, pageOpenedIndex, pageOpened, page;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  // 已经打开的页面\n                  opened = state.opened; // 判断此页面是否已经打开 并且记录位置\n\n                  pageOpenedIndex = 0;\n                  pageOpened = opened.find(function (page, index) {\n                    var same = page.fullPath === fullPath;\n                    pageOpenedIndex = same ? index : pageOpenedIndex;\n                    return same;\n                  });\n\n                  if (!pageOpened) {\n                    _context7.next = 8;\n                    break;\n                  }\n\n                  _context7.next = 6;\n                  return dispatch('openedUpdate', {\n                    index: pageOpenedIndex,\n                    params: params,\n                    query: query,\n                    fullPath: fullPath\n                  });\n\n                case 6:\n                  _context7.next = 12;\n                  break;\n\n                case 8:\n                  // 页面以前没有打开过\n                  page = state.pool.find(function (t) {\n                    return t.name === name;\n                  }); // 如果这里没有找到 page 代表这个路由虽然在框架内 但是不参与标签页显示\n\n                  if (!page) {\n                    _context7.next = 12;\n                    break;\n                  }\n\n                  _context7.next = 12;\n                  return dispatch('add', {\n                    tag: Object.assign({}, page),\n                    params: params,\n                    query: query,\n                    fullPath: fullPath\n                  });\n\n                case 12:\n                  commit('currentSet', fullPath); // end\n\n                  resolve();\n\n                case 14:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        return function (_x6) {\n          return _ref17.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 关闭一个 tag (关闭一个页面)\r\n     * @param {Object} param { tagName: 要关闭的标签名字 }\r\n     */\n    close: function close(_ref18, _ref19) {\n      var state = _ref18.state,\n          commit = _ref18.commit,\n          dispatch = _ref18.dispatch;\n      var tagName = _ref19.tagName;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(resolve) {\n          var newPage, isCurrent, len, i, index, _newPage, _newPage$name, name, _newPage$params, params, _newPage$query, query, routerObj;\n\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  // 下个新的页面\n                  newPage = state.opened[0];\n                  isCurrent = state.current === tagName; // 如果关闭的页面就是当前显示的页面\n\n                  if (!isCurrent) {\n                    _context8.next = 12;\n                    break;\n                  }\n\n                  // 去找一个新的页面\n                  len = state.opened.length;\n                  i = 0;\n\n                case 5:\n                  if (!(i < len)) {\n                    _context8.next = 12;\n                    break;\n                  }\n\n                  if (!(state.opened[i].fullPath === tagName)) {\n                    _context8.next = 9;\n                    break;\n                  }\n\n                  // 是否只剩最后一个，是则跳首页\n                  if (len > 1) {\n                    // 如果是最后一个，则向前一个跳，否则向下一个跳\n                    if (i === len - 1) {\n                      newPage = state.opened[i - 1];\n                    } else {\n                      newPage = state.opened[i + 1];\n                    }\n                  } else {\n                    newPage = {};\n                  }\n\n                  return _context8.abrupt(\"break\", 12);\n\n                case 9:\n                  i++;\n                  _context8.next = 5;\n                  break;\n\n                case 12:\n                  // 找到这个页面在已经打开的数据里是第几个\n                  index = state.opened.findIndex(function (page) {\n                    return page.fullPath === tagName;\n                  });\n\n                  if (index >= 0) {\n                    // 如果这个页面是缓存的页面 将其在缓存设置中删除\n                    commit('keepAliveRemove', state.opened[index].name); // 更新数据 删除关闭的页面\n\n                    state.opened.splice(index, 1);\n                  } // 持久化\n\n\n                  _context8.next = 16;\n                  return dispatch('opened2db');\n\n                case 16:\n                  // 最后需要判断是否需要跳到首页\n                  if (isCurrent) {\n                    _newPage = newPage, _newPage$name = _newPage.name, name = _newPage$name === void 0 ? 'index' : _newPage$name, _newPage$params = _newPage.params, params = _newPage$params === void 0 ? {} : _newPage$params, _newPage$query = _newPage.query, query = _newPage$query === void 0 ? {} : _newPage$query;\n                    routerObj = {\n                      name: name,\n                      params: params,\n                      query: query\n                    };\n                    router.push(routerObj, function () {});\n                  } // end\n\n\n                  resolve();\n\n                case 18:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        return function (_x7) {\n          return _ref20.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 关闭当前标签左边的标签\r\n     * @param {Object} param { pageSelect: 当前选中的tagName }\r\n     */\n    closeLeft: function closeLeft(_ref21) {\n      var state = _ref21.state,\n          commit = _ref21.commit,\n          dispatch = _ref21.dispatch;\n\n      var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref22.pageSelect;\n\n      return new Promise( /*#__PURE__*/function () {\n        var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(resolve) {\n          var pageAim, currentIndex;\n          return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.fullPath === pageAim) {\n                      currentIndex = index;\n                    }\n                  });\n\n                  if (currentIndex > 0) {\n                    // 删除打开的页面 并在缓存设置中删除\n                    state.opened.splice(1, currentIndex - 1).forEach(function (_ref24) {\n                      var name = _ref24.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  }\n\n                  state.current = pageAim;\n\n                  if (router.app.$route.fullPath !== pageAim) {\n                    router.push(pageAim);\n                  } // 持久化\n\n\n                  _context9.next = 8;\n                  return dispatch('opened2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9);\n        }));\n\n        return function (_x8) {\n          return _ref23.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 关闭当前标签右边的标签\r\n     * @param {Object} param { pageSelect: 当前选中的tagName }\r\n     */\n    closeRight: function closeRight(_ref25) {\n      var state = _ref25.state,\n          commit = _ref25.commit,\n          dispatch = _ref25.dispatch;\n\n      var _ref26 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref26.pageSelect;\n\n      return new Promise( /*#__PURE__*/function () {\n        var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(resolve) {\n          var pageAim, currentIndex;\n          return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.fullPath === pageAim) {\n                      currentIndex = index;\n                    }\n                  }); // 删除打开的页面 并在缓存设置中删除\n\n                  state.opened.splice(currentIndex + 1).forEach(function (_ref28) {\n                    var name = _ref28.name;\n                    return commit('keepAliveRemove', name);\n                  }); // 设置当前的页面\n\n                  state.current = pageAim;\n\n                  if (router.app.$route.fullPath !== pageAim) {\n                    router.push(pageAim);\n                  } // 持久化\n\n\n                  _context10.next = 8;\n                  return dispatch('opened2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10);\n        }));\n\n        return function (_x9) {\n          return _ref27.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 关闭当前激活之外的 tag\r\n     * @param {Object} param { pageSelect: 当前选中的tagName }\r\n     */\n    closeOther: function closeOther(_ref29) {\n      var state = _ref29.state,\n          commit = _ref29.commit,\n          dispatch = _ref29.dispatch;\n\n      var _ref30 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          pageSelect = _ref30.pageSelect;\n\n      return new Promise( /*#__PURE__*/function () {\n        var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(resolve) {\n          var pageAim, currentIndex;\n          return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n            while (1) {\n              switch (_context11.prev = _context11.next) {\n                case 0:\n                  pageAim = pageSelect || state.current;\n                  currentIndex = 0;\n                  state.opened.forEach(function (page, index) {\n                    if (page.fullPath === pageAim) {\n                      currentIndex = index;\n                    }\n                  }); // 删除打开的页面数据 并更新缓存设置\n\n                  if (currentIndex === 0) {\n                    state.opened.splice(1).forEach(function (_ref32) {\n                      var name = _ref32.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  } else {\n                    state.opened.splice(currentIndex + 1).forEach(function (_ref33) {\n                      var name = _ref33.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                    state.opened.splice(1, currentIndex - 1).forEach(function (_ref34) {\n                      var name = _ref34.name;\n                      return commit('keepAliveRemove', name);\n                    });\n                  } // 设置新的页面\n\n\n                  state.current = pageAim;\n\n                  if (router.app.$route.fullPath !== pageAim) {\n                    router.push(pageAim);\n                  } // 持久化\n\n\n                  _context11.next = 8;\n                  return dispatch('opened2db');\n\n                case 8:\n                  // end\n                  resolve();\n\n                case 9:\n                case \"end\":\n                  return _context11.stop();\n              }\n            }\n          }, _callee11);\n        }));\n\n        return function (_x10) {\n          return _ref31.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\r\n     * @description 关闭所有 tag\r\n     * @param {Object} state vuex state\r\n     */\n    closeAll: function closeAll(_ref35) {\n      var state = _ref35.state,\n          commit = _ref35.commit,\n          dispatch = _ref35.dispatch;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref36 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(resolve) {\n          return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n            while (1) {\n              switch (_context12.prev = _context12.next) {\n                case 0:\n                  // 删除打开的页面 并在缓存设置中删除\n                  state.opened.splice(1).forEach(function (_ref37) {\n                    var name = _ref37.name;\n                    return commit('keepAliveRemove', name);\n                  }); // 持久化\n\n                  _context12.next = 3;\n                  return dispatch('opened2db');\n\n                case 3:\n                  // 关闭所有的标签页后需要判断一次现在是不是在首页\n                  if (router.app.$route.name !== 'index') {\n                    router.push({\n                      name: 'index'\n                    }, function () {});\n                  } // end\n\n\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context12.stop();\n              }\n            }\n          }, _callee12);\n        }));\n\n        return function (_x11) {\n          return _ref36.apply(this, arguments);\n        };\n      }());\n    }\n  },\n  mutations: {\n    /**\r\n     * @class keepAlive\r\n     * @description 从已经打开的页面记录中更新需要缓存的页面记录\r\n     * @param {Object} state vuex state\r\n     */\n    keepAliveRefresh: function keepAliveRefresh(state) {\n      state.keepAlive = state.opened.filter(function (item) {\n        return isKeepAlive(item);\n      }).map(function (e) {\n        return e.name;\n      });\n    },\n\n    /**\r\n     * @description 删除一个页面的缓存设置\r\n     * @param {Object} state vuex state\r\n     * @param {String} name name\r\n     */\n    keepAliveRemove: function keepAliveRemove(state, name) {\n      var list = _toConsumableArray(state.keepAlive);\n\n      var index = list.findIndex(function (item) {\n        return item === name;\n      });\n\n      if (index !== -1) {\n        list.splice(index, 1);\n        state.keepAlive = list;\n      }\n    },\n\n    /**\r\n     * @description 增加一个页面的缓存设置\r\n     * @param {Object} state vuex state\r\n     * @param {String} name name\r\n     */\n    keepAlivePush: function keepAlivePush(state, name) {\n      var keep = _toConsumableArray(state.keepAlive);\n\n      keep.push(name);\n      state.keepAlive = keep;\n    },\n\n    /**\r\n     * @description 清空页面缓存设置\r\n     * @param {Object} state vuex state\r\n     */\n    keepAliveClean: function keepAliveClean(state) {\n      state.keepAlive = [];\n    },\n\n    /**\r\n     * @class current\r\n     * @description 设置当前激活的页面 fullPath\r\n     * @param {Object} state vuex state\r\n     * @param {String} fullPath new fullPath\r\n     */\n    currentSet: function currentSet(state, fullPath) {\n      state.current = fullPath;\n    },\n\n    /**\r\n     * @class pool\r\n     * @description 保存 pool (候选池)\r\n     * @param {Object} state vuex state\r\n     * @param {Array} routes routes\r\n     */\n    init: function init(state, routes) {\n      var pool = [];\n\n      var push = function push(routes) {\n        routes.forEach(function (route) {\n          if (route.children) {\n            push(route.children);\n          } else {\n            if (!route.hidden) {\n              var meta = route.meta,\n                  name = route.name,\n                  path = route.path;\n              pool.push({\n                meta: meta,\n                name: name,\n                path: path\n              });\n            }\n          }\n        });\n      };\n\n      push(routes);\n      state.pool = pool;\n    }\n  }\n};",null]}