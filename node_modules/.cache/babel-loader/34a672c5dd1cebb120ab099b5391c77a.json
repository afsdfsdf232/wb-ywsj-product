{"remainingRequest":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\libs\\system\\index.js","dependencies":[{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\libs\\system\\index.js","mtime":1589174870000},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628602912197},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js","mtime":1628602899323},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js","mtime":1607701091992}],"contextDependencies":[],"result":["/**\r\n * 系统内置方法集，正常情况下您不应该修改或移除此文件\r\n * */\nimport { cloneDeep } from 'lodash';\n/**\r\n * @description 根据当前路由，找打顶部菜单名称\r\n * @param {String} currentPath 当前路径\r\n * @param {Array} menuList 所有路径\r\n * */\n\nfunction getHeaderName(currentPath, menuList) {\n  var allMenus = [];\n  menuList.forEach(function (menu) {\n    var headerName = menu.header || '';\n    var menus = transferMenu(menu, headerName);\n    allMenus.push({\n      path: menu.path,\n      header: headerName\n    });\n    menus.forEach(function (item) {\n      return allMenus.push(item);\n    });\n  });\n  var currentMenu = allMenus.find(function (item) {\n    return item.path === currentPath;\n  });\n  return currentMenu ? currentMenu.header : null;\n}\n\nfunction transferMenu(menu, headerName) {\n  if (menu.children && menu.children.length) {\n    return menu.children.reduce(function (all, item) {\n      all.push({\n        path: item.path,\n        header: headerName\n      });\n      var foundChildren = transferMenu(item, headerName);\n      return all.concat(foundChildren);\n    }, []);\n  } else {\n    return [menu];\n  }\n}\n\nexport { getHeaderName };\n/**\r\n * @description 根据当前顶栏菜单 name，找到对应的二级菜单\r\n * @param {Array} menuList 所有的二级菜单\r\n * @param {String} headerName 当前顶栏菜单的 name\r\n * */\n\nfunction getMenuSider(menuList) {\n  var headerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (headerName) {\n    return menuList.filter(function (item) {\n      return item.header === headerName;\n    });\n  } else {\n    return menuList;\n  }\n}\n\nexport { getMenuSider };\n/**\r\n * @description 根据当前路由，找到其所有父菜单 path，作为展开侧边栏 open-names 依据\r\n * @param {String} currentPath 当前路径\r\n * @param {Array} menuList 所有路径\r\n * */\n\nfunction getSiderSubmenu(currentPath, menuList) {\n  var allMenus = [];\n  menuList.forEach(function (menu) {\n    var menus = transferSubMenu(menu, []);\n    allMenus.push({\n      path: menu.path,\n      openNames: []\n    });\n    menus.forEach(function (item) {\n      return allMenus.push(item);\n    });\n  });\n  var currentMenu = allMenus.find(function (item) {\n    return item.path === currentPath;\n  });\n  return currentMenu ? currentMenu.openNames : [];\n}\n\nfunction transferSubMenu(menu, openNames) {\n  if (menu.children && menu.children.length) {\n    var itemOpenNames = openNames.concat([menu.path]);\n    return menu.children.reduce(function (all, item) {\n      all.push({\n        path: item.path,\n        openNames: itemOpenNames\n      });\n      var foundChildren = transferSubMenu(item, itemOpenNames);\n      return all.concat(foundChildren);\n    }, []);\n  } else {\n    return [menu].map(function (item) {\n      return {\n        path: item.path,\n        openNames: openNames\n      };\n    });\n  }\n}\n\nexport { getSiderSubmenu };\n/**\r\n * @description 递归获取所有子菜单\r\n * */\n\nfunction getAllSiderMenu(menuList) {\n  var allMenus = [];\n  menuList.forEach(function (menu) {\n    if (menu.children && menu.children.length) {\n      var menus = getMenuChildren(menu);\n      menus.forEach(function (item) {\n        return allMenus.push(item);\n      });\n    } else {\n      allMenus.push(menu);\n    }\n  });\n  return allMenus;\n}\n\nfunction getMenuChildren(menu) {\n  if (menu.children && menu.children.length) {\n    return menu.children.reduce(function (all, item) {\n      var foundChildren = getMenuChildren(item);\n      return all.concat(foundChildren);\n    }, []);\n  } else {\n    return [menu];\n  }\n}\n\nexport { getAllSiderMenu };\n/**\r\n * @description 将菜单转为平级\r\n * */\n\nfunction flattenSiderMenu(menuList, newList) {\n  menuList.forEach(function (menu) {\n    var newMenu = {};\n\n    for (var i in menu) {\n      if (i !== 'children') newMenu[i] = cloneDeep(menu[i]);\n    }\n\n    newList.push(newMenu);\n    menu.children && flattenSiderMenu(menu.children, newList);\n  });\n  return newList;\n}\n\nexport { flattenSiderMenu };\n/**\r\n * @description 判断列表1中是否包含了列表2中的某一项\r\n * 因为用户权限 access 为数组，includes 方法无法直接得出结论\r\n * */\n\nfunction includeArray(list1, list2) {\n  var status = false;\n  list2.forEach(function (item) {\n    if (list1.includes(item)) status = true;\n  });\n  return status;\n}\n\nexport { includeArray };",null]}