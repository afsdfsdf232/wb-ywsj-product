{"remainingRequest":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\plugins\\request\\index.js","dependencies":[{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\src\\plugins\\request\\index.js","mtime":1623392302000},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628602912197},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\babel-loader\\lib\\index.js","mtime":1628602899323},{"path":"D:\\project\\WB\\d2\\免费领前端任务包\\ywsj-product\\node_modules\\eslint-loader\\index.js","mtime":1607701091992}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport store from '@/store';\nimport axios from 'axios';\nimport util from '@/libs/util';\nimport Setting from '@/setting';\nimport Qs from 'qs';\nimport { Message, Notice } from 'view-design';\nimport router from '@/router'; // 创建一个错误\n\nfunction errorCreate() {\n  var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '服务器内部错误';\n  console.log(msg);\n  var err = new Error(msg);\n  errorLog(err);\n  throw err;\n} // 记录和显示错误\n\n\nfunction errorLog(err) {\n  // 添加到日志\n  store.dispatch('admin/log/push', {\n    message: '数据请求异常',\n    type: 'error',\n    meta: {\n      error: err\n    }\n  }); // 打印到控制台\n\n  if (process.env.NODE_ENV === 'development') {\n    util.log.error('>>>>>> Error >>>>>>');\n    console.log(err);\n  } // 显示提示，可配置使用 iView 的 $Message 还是 $Notice 组件来显示\n\n\n  if (Setting.errorModalType === 'Message') {\n    Message.error({\n      content: err.message || err.msg,\n      duration: Setting.modalDuration\n    });\n  } else if (Setting.errorModalType === 'Notice') {\n    Notice.error({\n      title: '提示',\n      desc: err.message,\n      duration: Setting.modalDuration\n    });\n  }\n}\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'; // 创建一个 axios 实例\n\nvar service = axios.create({\n  // baseURL: process.env.VUE_APP_BASE_URL,\n  baseURL: Setting.apiBaseURL,\n  // baseURL: 'http://localhost:8081' + '/api',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded' // 'Content-Type': 'application/json'\n\n  },\n  // 'type': 'json',\n  timeout: 60000 // 请求超时时间\n\n});\nservice.interceptors.request.use(function (config) {\n  // 在请求发送之前做一些处理\n  var token = util.cookies.get('token'); // axios.defaults.headers.common['token'] = token;\n  // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n  // config.headers['Cookies'] = 'JSESSIONID=' + token;\n\n  config = _objectSpread(_objectSpread({}, config), {}, {\n    header: {\n      // uuid,\n      timeOffset: 60000,\n      'content-type': 'application/x-www-form-urlencoded'\n    }\n  }); // json 提交\n\n  if (config.isJson) {\n    config = _objectSpread(_objectSpread({}, config), {}, {\n      header: {\n        // uuid,\n        timeOffset: 60000,\n        \"content-type\": 'application/json'\n      }\n    });\n  } // config.data = JSON.parse(config.data)\n\n\n  config.data.token = token;\n  var comppanyId = util.cookies.get('companyId');\n\n  if (config.data.companyId === undefined || config.data.companyId === null) {\n    config.data.companyId = comppanyId;\n  }\n\n  if (config.data.type === 'json') {// config.data = JSON.stringify(config.data)\n  } else {\n    if (config.method.toLocaleLowerCase() === 'post') {\n      // config.data = Qs.stringify(config.data)\n      config.data = config.data;\n    } else {\n      // config.params = Qs.stringify(JSON.stringify(config.data));\n      config.params = config.data;\n    }\n  }\n\n  return config;\n}, function (error) {\n  // 发送失败\n  console.log(error);\n  Promise.reject(error);\n});\nvar isLoginDD = false; // 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  // dataAxios 是 axios 返回数据中的 data\n  var dataAxios = response.data; // 这个状态码是和后端约定的\n\n  var code = dataAxios.code; // console.log(code)\n\n  var url = response.request.responseURL;\n\n  if (/\\/user\\/onLogin/.test(url) && Setting.isDDLogin) {\n    console.log('没有登录');\n\n    if (sessionStorage.getItem('isNologinNum')) {\n      return false;\n    } else {\n      isLoginDD = true;\n    }\n\n    sessionStorage.setItem('isNologinNum', true);\n    util.ddLoginFun(function () {\n      isLoginDD = false;\n    });\n    return false;\n  } // 根据 code 进行判断\n\n\n  if (dataAxios.code === undefined) {\n    // 如果没有 code 代表这不是项目后端开发的接口\n    return response;\n  } else {\n    // 有 code 代表这是一个后端接口 可以进行进一步的判断\n    if (dataAxios.code === 0) {\n      return dataAxios;\n    } else {\n      errorCreate(\"\".concat(response.data.data.msg || response.data.message));\n    }\n    /* switch (code) {\r\n    case 200:\r\n        // [ 示例 ] code === 0 代表没有错误\r\n        return dataAxios;\r\n    case 601:\r\n        // [ 示例 ] 其它和后台约定的 code\r\n        return dataAxios;\r\n    default:\r\n        // 不是正确的 code\r\n        errorCreate(`${dataAxios.msg}`);\r\n        break;\r\n    } */\n\n  }\n}, function (error) {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '参数验证错误';\n        break;\n\n      case 302:\n        error.message = '请先登录！';\n        break;\n\n      case 401:\n        error.message = '无权操作';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = \"\\u8D44\\u6E90\\u672A\\u627E\\u5230: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 405:\n        error.message = '请求方式错误';\n        break;\n\n      case 500:\n        error.message = '网络错误，请稍候再试';\n        break;\n\n      case 1001:\n        error.message = '服务调用异常';\n        break;\n\n      case 1003:\n        error.message = '参数不存在';\n        break;\n\n      case 1004:\n        error.message = '文件上传失败';\n        break;\n\n      case 504:\n        error.message = '网关超时';\n        break;\n\n      case 505:\n        error.message = 'HTTP版本不受支持';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  errorLog(error);\n  return Promise.reject(error);\n});\nexport default service;",null]}